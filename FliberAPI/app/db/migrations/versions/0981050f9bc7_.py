"""empty message

Revision ID: 0981050f9bc7
Revises: 
Create Date: 2022-02-22 16:11:12.736341

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '0981050f9bc7'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('AbilityConfiguration',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('LowerLimit', sa.Integer(), nullable=False),
    sa.Column('UpperLimit', sa.Integer(), nullable=False),
    sa.Column('Type', sa.String(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('Advisor',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('Ref_Id', sa.Integer(), nullable=True),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('BSEIncomeSlab',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Code', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('BankBranches',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('IFSC', sa.String(), nullable=False),
    sa.Column('BankId', sa.Integer(), nullable=True),
    sa.Column('Branch', sa.String(), nullable=False),
    sa.Column('Address', sa.String(), nullable=False),
    sa.Column('City', sa.String(), nullable=False),
    sa.Column('District', sa.String(), nullable=False),
    sa.Column('State', sa.String(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('Banks',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Code', sa.Integer(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('BseAccountType',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Code', sa.String(), nullable=False),
    sa.Column('Details', sa.String(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('BseClientHolding',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Code', sa.String(), nullable=False),
    sa.Column('Details', sa.String(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('BseClientOccupationCode',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Code', sa.String(), nullable=False),
    sa.Column('Details', sa.String(), nullable=False),
    sa.Column('CreateOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('BseClientTaxStatus',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Code', sa.String(), nullable=False),
    sa.Column('TaxStatus', sa.String(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('BseCommunicationMode',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Code', sa.String(), nullable=False),
    sa.Column('Details', sa.String(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('BseCountryCode',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Code', sa.String(), nullable=False),
    sa.Column('CountryName', sa.String(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('BsePanExemptCategory',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Category', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('BseStateCode',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Code', sa.String(), nullable=False),
    sa.Column('State', sa.String(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('Bucket',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Years', sa.Integer(), nullable=True),
    sa.Column('Rate', sa.Float(), nullable=False),
    sa.Column('RealRate', sa.Float(), nullable=False),
    sa.Column('Ref_Id', sa.Integer(), nullable=True),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('CashFreeConfiguration',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('KeyId', sa.String(), nullable=False),
    sa.Column('KeySecret', sa.String(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('DailyNavData',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('FundName', sa.String(), nullable=False),
    sa.Column('NavAmount', sa.Float(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('Income',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Type', sa.Integer(), nullable=False),
    sa.Column('At', sa.Integer(), nullable=False),
    sa.Column('To', sa.Integer(), nullable=False),
    sa.Column('Frequency', sa.String(), nullable=False),
    sa.Column('PresentValue', sa.Boolean(), nullable=False),
    sa.Column('Amount', sa.Integer(), nullable=False),
    sa.Column('GrowthRate', sa.Float(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('Ref_Id', sa.Integer(), nullable=True),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('Kyc',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('FirstPan', sa.String(), nullable=False),
    sa.Column('SecPan', sa.String(), nullable=False),
    sa.Column('ThirdPan', sa.String(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('NetWorthBucketData',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('NetWorthFrequencyTypeData',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Months', sa.Integer(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('NetWorthLoanTypeData',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('NetWorthSchemeTypeData',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('NetWorthVehicleTypeData',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('NomineeRelation',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Code', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('OccupationTypes',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Code', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('PhoneApi',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Phone', sa.String(), nullable=False),
    sa.Column('Password', sa.String(), nullable=False),
    sa.Column('IsMobileVerified', sa.Boolean(), nullable=False),
    sa.Column('IsResidentialInformation', sa.Boolean(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('PostGoal',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Priority', sa.Integer(), nullable=False),
    sa.Column('Type', sa.String(), nullable=False),
    sa.Column('At', sa.Integer(), nullable=False),
    sa.Column('To', sa.Integer(), nullable=False),
    sa.Column('Frequency', sa.String(), nullable=False),
    sa.Column('PresentValue', sa.Boolean(), nullable=False),
    sa.Column('Amount', sa.Integer(), nullable=False),
    sa.Column('GrowthRate', sa.Float(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UserId', sa.String(), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('PreRetirementCorpusCalculation',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('cf_payment_id', sa.Integer(), nullable=False),
    sa.Column('order_id', sa.String(), nullable=False),
    sa.Column('entity', sa.String(), nullable=False),
    sa.Column('order_amount', sa.Integer(), nullable=False),
    sa.Column('payment_time', sa.DateTime(), nullable=False),
    sa.Column('service_charge', sa.Integer(), nullable=False),
    sa.Column('service_tax', sa.Float(), nullable=False),
    sa.Column('settlement_amount', sa.Float(), nullable=False),
    sa.Column('cf_settlement_id', sa.Integer(), nullable=False),
    sa.Column('transfer_id', sa.Integer(), nullable=False),
    sa.Column('transfer_time', sa.DateTime(), nullable=False),
    sa.Column('transfer_utr', sa.String(), nullable=False),
    sa.Column('order_currency', sa.String(), nullable=False),
    sa.Column('settlement_currency', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('RiskProfileConfiguration',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Type', sa.String(), nullable=False),
    sa.Column('Conservative', sa.String(), nullable=False),
    sa.Column('ModConservative', sa.String(), nullable=False),
    sa.Column('Balanced', sa.String(), nullable=False),
    sa.Column('ModAggressive', sa.String(), nullable=False),
    sa.Column('Aggressive', sa.String(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('RrScoreConfiguration',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('RORforEPFOAndGS', sa.Integer(), nullable=False),
    sa.Column('EquityRORforNPSandMLI', sa.Integer(), nullable=False),
    sa.Column('DebtORforNPSandMLI', sa.Integer(), nullable=False),
    sa.Column('InflationRate', sa.Integer(), nullable=False),
    sa.Column('RateOfReturn', sa.Integer(), nullable=False),
    sa.Column('LifeExp', sa.Integer(), nullable=False),
    sa.Column('RetirementAge', sa.Integer(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('RuleCondition',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Rulenumber', sa.String(), nullable=False),
    sa.Column('RiskCategory', sa.String(), nullable=False),
    sa.Column('FundingMinAmount', sa.Integer(), nullable=False),
    sa.Column('FundingMaxAmount', sa.Integer(), nullable=False),
    sa.Column('TimetoRetirementMin', sa.Integer(), nullable=False),
    sa.Column('TimetoRetirementMax', sa.Integer(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('SignzyAccount',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('UserName', sa.String(), nullable=False),
    sa.Column('Password', sa.String(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('SourceOfWealth',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Code', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('SustainabilityScoreConfiguration',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('RetirementAge', sa.Integer(), nullable=False),
    sa.Column('Inflation', sa.Integer(), nullable=False),
    sa.Column('LifeExp', sa.Integer(), nullable=False),
    sa.Column('RateOfReturn', sa.Integer(), nullable=False),
    sa.Column('HealthCareInflation', sa.Integer(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('TargetAssets',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Type', sa.String(), nullable=False),
    sa.Column('MinAgeLimit', sa.Integer(), nullable=False),
    sa.Column('MaxAgeLimit', sa.Integer(), nullable=False),
    sa.Column('MinAmount', sa.Integer(), nullable=False),
    sa.Column('MaxAmount', sa.Integer(), nullable=False),
    sa.Column('Equity', sa.String(), nullable=False),
    sa.Column('Debt', sa.String(), nullable=False),
    sa.Column('Gold', sa.String(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('UserAnswers',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('QuestionId', sa.String(), nullable=False),
    sa.Column('SubQuestionId', sa.String(), nullable=False),
    sa.Column('UserAnswer', sa.Integer(), nullable=False),
    sa.Column('UserId', sa.String(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('UserResult',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('UserId', sa.String(), nullable=False),
    sa.Column('RiskProfile', sa.String(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('WillingnessConfiguration',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('LowerLimit', sa.Integer(), nullable=False),
    sa.Column('UpperLimit', sa.Integer(), nullable=False),
    sa.Column('Type', sa.String(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('AreasOfConcerns',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('AdvisorId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['AdvisorId'], ['Advisor.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('AssetAllocationAttributes',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('AdvisorId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['AdvisorId'], ['Advisor.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('AssetLiabilityCategory',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('AdvisorId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['AdvisorId'], ['Advisor.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('AssetType',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('AdvisorId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['AdvisorId'], ['Advisor.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('BankAccountType',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('AdvisorId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['AdvisorId'], ['Advisor.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('CorpusStatus',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('LowRange', sa.Integer(), nullable=False),
    sa.Column('UpRange', sa.Integer(), nullable=False),
    sa.Column('AdvisorId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['AdvisorId'], ['Advisor.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('EventType',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('AdvisorId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['AdvisorId'], ['Advisor.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('ExpenseType',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('AdvisorId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['AdvisorId'], ['Advisor.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('Frequency',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Value', sa.Integer(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('AdvisorId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('Ref_Id', sa.Integer(), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['AdvisorId'], ['Advisor.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('FundsType',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('AdvisorId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['AdvisorId'], ['Advisor.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('Gender',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('AdvisorId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('Ref_Id', sa.Integer(), nullable=True),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['AdvisorId'], ['Advisor.Id'], ),
    sa.PrimaryKeyConstraint('Id'),
    sa.UniqueConstraint('Name')
    )
    op.create_table('GoalBucket',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('AdvisorId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('Ref_Id', sa.Integer(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['AdvisorId'], ['Advisor.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('GoalType',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('AdvisorId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('Ref_Id', sa.Integer(), nullable=True),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['AdvisorId'], ['Advisor.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('IncomeType',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('AdvisorId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('Ref_Id', sa.Integer(), nullable=True),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['AdvisorId'], ['Advisor.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('InstrumentType',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('AdvisorId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['AdvisorId'], ['Advisor.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('InvestmentBucket',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('AdvisorId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['AdvisorId'], ['Advisor.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('InvestmentProfile',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('AdvisorId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['AdvisorId'], ['Advisor.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('InvestmentType',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('AdvisorId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['AdvisorId'], ['Advisor.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('LoanType',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('AdvisorId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['AdvisorId'], ['Advisor.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('MaritalStatus',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('AdvisorId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['AdvisorId'], ['Advisor.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('NetWorthCategoryData',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('BucketId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['BucketId'], ['NetWorthBucketData.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('OtherGoalType',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('AdvisorId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['AdvisorId'], ['Advisor.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('PaymentType',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('AdvisorId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['AdvisorId'], ['Advisor.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('PolicyWeightage',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('AdvisorId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['AdvisorId'], ['Advisor.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('PortfolioMorningStar',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('CurrentValue', sa.Float(), nullable=False),
    sa.Column('Reviews', sa.String(), nullable=False),
    sa.Column('AdvisorId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['AdvisorId'], ['Advisor.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('QuestionType',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('AdvisorId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('Ref_Id', sa.Integer(), nullable=True),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['AdvisorId'], ['Advisor.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('Rate',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('Code', sa.Integer(), nullable=False),
    sa.Column('Percentage', sa.Integer(), nullable=False),
    sa.Column('AdvisorId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('Ref_Id', sa.Integer(), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['AdvisorId'], ['Advisor.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('RelationType',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('AdvisorId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['AdvisorId'], ['Advisor.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('RetirementStatus',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('AdvisorId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('Ref_Id', sa.Integer(), nullable=True),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['AdvisorId'], ['Advisor.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('Role',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('AdvisorId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('Ref_Id', sa.Integer(), nullable=True),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['AdvisorId'], ['Advisor.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('RuleAssetAllocation',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('RuleId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('assetType', sa.String(), nullable=False),
    sa.Column('AllocationPercentage', sa.Integer(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['RuleId'], ['RuleCondition.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('AssetsLimit',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('AssetTypeId', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('AssetLowerLimit', sa.Float(), nullable=False),
    sa.Column('AssetUpperLimit', sa.Float(), nullable=False),
    sa.Column('AssetCrossLimit', sa.Float(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['AssetTypeId'], ['AssetType.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('ExpenseCategory',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('AdvisorId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('GoalType', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('Rate', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('Frequency', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['AdvisorId'], ['Advisor.Id'], ),
    sa.ForeignKeyConstraint(['Frequency'], ['Frequency.Id'], ),
    sa.ForeignKeyConstraint(['GoalType'], ['GoalType.Id'], ),
    sa.ForeignKeyConstraint(['Rate'], ['Rate.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('FundLevelAssetPercent',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('AssetTypeId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('FundName', sa.String(), nullable=False),
    sa.Column('NavPercent', sa.Float(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['AssetTypeId'], ['AssetType.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('FundsCategory',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('AssetTypeId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('FundTypeId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('Type', sa.String(), nullable=False),
    sa.Column('MinAmount', sa.Integer(), nullable=False),
    sa.Column('MaxAmount', sa.Integer(), nullable=False),
    sa.Column('FundName', sa.String(), nullable=False),
    sa.Column('FundPercent', sa.Float(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['AssetTypeId'], ['AssetType.Id'], ),
    sa.ForeignKeyConstraint(['FundTypeId'], ['FundsType.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('GoalCategory',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('AdvisorId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('GoalTypeId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('RateId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('FrequencyId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('Ref_Id', sa.Integer(), nullable=True),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['AdvisorId'], ['Advisor.Id'], ),
    sa.ForeignKeyConstraint(['FrequencyId'], ['Frequency.Id'], ),
    sa.ForeignKeyConstraint(['GoalTypeId'], ['GoalType.Id'], ),
    sa.ForeignKeyConstraint(['RateId'], ['Rate.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('IncomeCategory',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('AdvisorId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('IncomeTypeId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('RateId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('FrequencyId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('Ref_Id', sa.Integer(), nullable=True),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['AdvisorId'], ['Advisor.Id'], ),
    sa.ForeignKeyConstraint(['FrequencyId'], ['Frequency.Id'], ),
    sa.ForeignKeyConstraint(['IncomeTypeId'], ['IncomeType.Id'], ),
    sa.ForeignKeyConstraint(['RateId'], ['Rate.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('InvestmentVehicle',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('AdvisorId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('InvestmentType', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['AdvisorId'], ['Advisor.Id'], ),
    sa.ForeignKeyConstraint(['InvestmentType'], ['InvestmentType.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('MorningStarNavs',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('AssetTypeId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('FundName', sa.String(), nullable=False),
    sa.Column('NavAmount', sa.Float(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['AssetTypeId'], ['AssetType.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('Question',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('QuestionTitle', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('PreviousQuestionId', sa.Integer(), nullable=False),
    sa.Column('AdvisorId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('QuestionTypeId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('QuestionSequence', sa.Integer(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('Ref_Id', sa.Integer(), nullable=True),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['AdvisorId'], ['Advisor.Id'], ),
    sa.ForeignKeyConstraint(['QuestionTypeId'], ['QuestionType.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('User',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Email', sa.String(), nullable=True),
    sa.Column('FirstName', sa.String(), nullable=True),
    sa.Column('LastName', sa.String(), nullable=True),
    sa.Column('Password', sa.String(), nullable=True),
    sa.Column('StartDate', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('Phone', sa.String(), nullable=False),
    sa.Column('IsStaff', sa.Boolean(), nullable=True),
    sa.Column('IsActive', sa.Boolean(), nullable=True),
    sa.Column('GenderId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('RoleId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('RetirementStatusId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('AdvisorId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('MaritalStatusId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('IsMobileNumberValidated', sa.Boolean(), nullable=True),
    sa.Column('IsEmailValidated', sa.Boolean(), nullable=True),
    sa.Column('DateOfBirth', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('RetirementAge', sa.Integer(), nullable=True),
    sa.Column('LifeExpectancy', sa.Integer(), nullable=True),
    sa.Column('FatherName', sa.String(), nullable=True),
    sa.Column('MotherName', sa.String(), nullable=True),
    sa.Column('SpouseName', sa.String(), nullable=True),
    sa.Column('SpouseDOB', sa.String(), nullable=True),
    sa.Column('SpousePan', sa.String(), nullable=True),
    sa.Column('BornCityId', sa.String(), nullable=True),
    sa.Column('BornStateId', sa.String(), nullable=True),
    sa.Column('Nationality', sa.String(), nullable=True),
    sa.Column('SourceOfWealth', sa.String(), nullable=True),
    sa.Column('OccupationTypes', sa.String(), nullable=True),
    sa.Column('ResidentStatus', sa.String(), nullable=True),
    sa.Column('IncomeSlab', sa.String(), nullable=True),
    sa.Column('AddressType', sa.String(), nullable=True),
    sa.Column('AddressLine1', sa.String(), nullable=True),
    sa.Column('AddressLine2', sa.String(), nullable=True),
    sa.Column('CityId', sa.String(), nullable=True),
    sa.Column('StateId', sa.String(), nullable=True),
    sa.Column('PinCode', sa.String(), nullable=True),
    sa.Column('MPIN', sa.Integer(), nullable=True),
    sa.Column('IMEINumber', sa.String(), nullable=True),
    sa.Column('ModuleType', sa.Integer(), nullable=True),
    sa.Column('Status', sa.Integer(), nullable=True),
    sa.Column('LastQuestion', sa.Integer(), nullable=True),
    sa.Column('IsInitialPaymentIsDone', sa.Boolean(), nullable=True),
    sa.Column('IsPanVerified', sa.Boolean(), nullable=True),
    sa.Column('LastLogin', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['AdvisorId'], ['Advisor.Id'], ),
    sa.ForeignKeyConstraint(['GenderId'], ['Gender.Id'], ),
    sa.ForeignKeyConstraint(['MaritalStatusId'], ['MaritalStatus.Id'], ),
    sa.ForeignKeyConstraint(['RetirementStatusId'], ['RetirementStatus.Id'], ),
    sa.ForeignKeyConstraint(['RoleId'], ['Role.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('BseClientAccount',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('UserId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('AccountTypeNumber', sa.Integer(), nullable=False),
    sa.Column('AccountType', sa.String(), nullable=False),
    sa.Column('AccountNo', sa.String(), nullable=False),
    sa.Column('MICRNo', sa.String(), nullable=False),
    sa.Column('IFSCCode', sa.String(), nullable=False),
    sa.Column('DefaultBankFlag', sa.Boolean(), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['UserId'], ['User.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('BseClientCode',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('ClientCode', sa.String(), nullable=True),
    sa.Column('MemberCode', sa.String(), nullable=True),
    sa.Column('UserId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('RegnType', sa.String(), nullable=True),
    sa.Column('PrimaryHolderFirstName', sa.String(), nullable=True),
    sa.Column('PrimaryHolderMiddleName', sa.String(), nullable=True),
    sa.Column('PrimaryHolderLastName', sa.String(), nullable=True),
    sa.Column('TaxStatus', sa.String(), nullable=True),
    sa.Column('Gender', sa.String(), nullable=True),
    sa.Column('PrimaryHolderDobIncorporation', sa.String(), nullable=True),
    sa.Column('OccupationCode', sa.Integer(), nullable=True),
    sa.Column('HoldingNature', sa.String(), nullable=True),
    sa.Column('SecondHolderFirstName', sa.String(), nullable=True),
    sa.Column('SecondHolderMiddleName', sa.String(), nullable=True),
    sa.Column('SecondHolderLastName', sa.String(), nullable=True),
    sa.Column('ThirdHolderFirstName', sa.String(), nullable=True),
    sa.Column('ThirdHolderMiddleName', sa.String(), nullable=True),
    sa.Column('ThirdHolderLastName', sa.String(), nullable=True),
    sa.Column('SecondHolderDOB', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('ThirdHolderDOB', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('GuardianFirstName', sa.String(), nullable=True),
    sa.Column('GuardianMiddleName', sa.String(), nullable=True),
    sa.Column('GuardianLastName', sa.String(), nullable=True),
    sa.Column('GuardianDOB', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('PrimaryHolderPANExempt', sa.String(), nullable=True),
    sa.Column('SecondHolderPANExempt', sa.String(), nullable=True),
    sa.Column('ThirdHolderPANExempt', sa.String(), nullable=True),
    sa.Column('GuardianPANExempt', sa.String(), nullable=True),
    sa.Column('PrimaryHolderPAN', sa.String(), nullable=True),
    sa.Column('SecondHolderPAN', sa.String(), nullable=True),
    sa.Column('ThirdHolderPAN', sa.String(), nullable=True),
    sa.Column('GuardianPAN', sa.String(), nullable=True),
    sa.Column('PrimaryHolderExemptCategory', sa.String(), nullable=True),
    sa.Column('SecondHolderExemptCategory', sa.String(), nullable=True),
    sa.Column('ThirdHolderExemptCategory', sa.String(), nullable=True),
    sa.Column('GuardianExemptCategory', sa.String(), nullable=True),
    sa.Column('ClientType', sa.String(), nullable=True),
    sa.Column('PMS', sa.String(), nullable=True),
    sa.Column('DefaultDP', sa.String(), nullable=True),
    sa.Column('CDSL_DPID', sa.String(), nullable=True),
    sa.Column('CDSLCLTID', sa.String(), nullable=True),
    sa.Column('CMBP_Id', sa.Integer(), nullable=True),
    sa.Column('NSDLDPID', sa.String(), nullable=True),
    sa.Column('NSDLCLTID', sa.String(), nullable=True),
    sa.Column('AccountTypeOne', sa.String(), nullable=True),
    sa.Column('AccountNoOne', sa.String(), nullable=True),
    sa.Column('MICRNoOne', sa.String(), nullable=True),
    sa.Column('IFSCCodeOne', sa.String(), nullable=True),
    sa.Column('ChequeName', sa.String(), nullable=True),
    sa.Column('DivPayMode', sa.String(), nullable=True),
    sa.Column('AddressOne', sa.String(), nullable=True),
    sa.Column('AddressTwo', sa.String(), nullable=True),
    sa.Column('AddressThree', sa.String(), nullable=True),
    sa.Column('City', sa.String(), nullable=True),
    sa.Column('State', sa.String(), nullable=True),
    sa.Column('PinCode', sa.String(), nullable=True),
    sa.Column('Country', sa.String(), nullable=True),
    sa.Column('ResidentialPhone', sa.String(), nullable=True),
    sa.Column('ResidentialFax', sa.String(), nullable=True),
    sa.Column('OfficePhone', sa.String(), nullable=True),
    sa.Column('OfficeFax', sa.String(), nullable=True),
    sa.Column('Email', sa.String(), nullable=True),
    sa.Column('CommunicationMode', sa.String(), nullable=True),
    sa.Column('ForeignAddressOne', sa.String(), nullable=True),
    sa.Column('ForeignAddressTwo', sa.String(), nullable=True),
    sa.Column('ForeignAddressThree', sa.String(), nullable=True),
    sa.Column('ForeignAddressCity', sa.String(), nullable=True),
    sa.Column('ForeignAddressPinCode', sa.String(), nullable=True),
    sa.Column('ForeignAddressState', sa.String(), nullable=True),
    sa.Column('ForeignAddressCountry', sa.String(), nullable=True),
    sa.Column('ForeignAddressResidentialPhone', sa.String(), nullable=True),
    sa.Column('ForeignAddressFax', sa.String(), nullable=True),
    sa.Column('ForeignAddressOfficePhone', sa.String(), nullable=True),
    sa.Column('ForeignAddressOfficeFax', sa.String(), nullable=True),
    sa.Column('IndianMobileNo', sa.String(), nullable=True),
    sa.Column('PrimaryHolderKYCType', sa.String(), nullable=True),
    sa.Column('PrimaryHolderCKYCNumber', sa.Integer(), nullable=True),
    sa.Column('SecondHolderKYCType', sa.String(), nullable=True),
    sa.Column('SecondHolderCKYCNumber', sa.Integer(), nullable=True),
    sa.Column('ThirdHolderKYCType', sa.String(), nullable=True),
    sa.Column('ThirdHolderCKYCNumber', sa.Integer(), nullable=True),
    sa.Column('GuardianKYCType', sa.String(), nullable=True),
    sa.Column('GuardianCKYCNumber', sa.Integer(), nullable=True),
    sa.Column('PrimaryHolderKRAExemptRefNo', sa.String(), nullable=True),
    sa.Column('SecondHolderKRAExemptRefNo', sa.String(), nullable=True),
    sa.Column('ThirdHolderKRAExemptRefNo', sa.String(), nullable=True),
    sa.Column('GuardianKRAExemptRefNo', sa.String(), nullable=True),
    sa.Column('AadhaarUpdated', sa.String(), nullable=True),
    sa.Column('MapInId', sa.String(), nullable=True),
    sa.Column('PaperLessFlag', sa.String(), nullable=True),
    sa.Column('LEINo', sa.String(), nullable=True),
    sa.Column('LEIValidity', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('FillerOne', sa.String(), nullable=True),
    sa.Column('FillerTwo', sa.String(), nullable=True),
    sa.Column('FillerThree', sa.String(), nullable=True),
    sa.Column('SignatureUrl', sa.String(), nullable=True),
    sa.Column('ChequeUrl', sa.String(), nullable=True),
    sa.Column('PanCardUrl', sa.String(), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['UserId'], ['User.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('BseClientNominee',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('UserId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('NomineeNumber', sa.Integer(), nullable=False),
    sa.Column('NomineeName', sa.String(), nullable=False),
    sa.Column('NomineeRelationship', sa.String(), nullable=False),
    sa.Column('NomineeApplicablePercent', sa.Float(), nullable=False),
    sa.Column('NomineeMinorFlag', sa.Boolean(), nullable=False),
    sa.Column('NomineeDOB', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('NomineeGuardian', sa.String(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['UserId'], ['User.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('Choice',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Text', sa.String(), nullable=False),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('Value', sa.Integer(), nullable=False),
    sa.Column('AdvisorId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('QuestionId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('ChoiceSequence', sa.Integer(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('Ref_Id', sa.Integer(), nullable=True),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['AdvisorId'], ['Advisor.Id'], ),
    sa.ForeignKeyConstraint(['QuestionId'], ['Question.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('DailyAssetData',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('UserId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('AssetTypeId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('FundName', sa.String(), nullable=False),
    sa.Column('NoOfUnits', sa.Integer(), nullable=False),
    sa.Column('NavAmount', sa.Float(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['AssetTypeId'], ['AssetType.Id'], ),
    sa.ForeignKeyConstraint(['UserId'], ['User.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('GeneratedBuckets',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Amount', sa.Integer(), nullable=False),
    sa.Column('UserId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['UserId'], ['User.Id'], ),
    sa.PrimaryKeyConstraint('Id'),
    sa.UniqueConstraint('Name')
    )
    op.create_table('GeneratedCashLadder',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Age', sa.Integer(), nullable=False),
    sa.Column('NetCF', sa.Float(), nullable=False),
    sa.Column('NormalizedCF', sa.Float(), nullable=False),
    sa.Column('OpeningBalance', sa.Float(), nullable=False),
    sa.Column('TotalGrowth', sa.Float(), nullable=False),
    sa.Column('ClosingBalance', sa.Float(), nullable=False),
    sa.Column('UserId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['UserId'], ['User.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('GeneratedCashLadderPre',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Age', sa.Integer(), nullable=True),
    sa.Column('UserId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['UserId'], ['User.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('GeneratedGoals',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('UserId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('Age', sa.Integer(), nullable=True),
    sa.Column('GoalName', sa.String(), nullable=True),
    sa.Column('GoalValue', sa.String(), nullable=True),
    sa.Column('GoalAtAge', sa.String(), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['UserId'], ['User.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('GeneratedIncomes',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('Amount', sa.Integer(), nullable=False),
    sa.Column('UserId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['UserId'], ['User.Id'], ),
    sa.PrimaryKeyConstraint('Id'),
    sa.UniqueConstraint('Name')
    )
    op.create_table('NetWorthAnnuityData',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('UserId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CategoryId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('BucketId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('SchemeName', sa.String(), nullable=False),
    sa.Column('AccountNumber', sa.String(), nullable=False),
    sa.Column('StartDate', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('SchemeType', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('Corpus', sa.Float(), nullable=False),
    sa.Column('AnnuityIncome', sa.Float(), nullable=False),
    sa.Column('Frequency', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('GrowthOfPension', sa.Float(), nullable=False),
    sa.Column('AnnuityMaturity', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['BucketId'], ['NetWorthBucketData.Id'], ),
    sa.ForeignKeyConstraint(['CategoryId'], ['NetWorthCategoryData.Id'], ),
    sa.ForeignKeyConstraint(['Frequency'], ['NetWorthFrequencyTypeData.Id'], ),
    sa.ForeignKeyConstraint(['SchemeType'], ['NetWorthSchemeTypeData.Id'], ),
    sa.ForeignKeyConstraint(['UserId'], ['User.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('NetWorthBankDepositData',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('UserId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CategoryId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('BucketId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('AccountNumber', sa.Float(), nullable=False),
    sa.Column('BankName', sa.String(), nullable=False),
    sa.Column('CurrentBalance', sa.Float(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['BucketId'], ['NetWorthBucketData.Id'], ),
    sa.ForeignKeyConstraint(['CategoryId'], ['NetWorthCategoryData.Id'], ),
    sa.ForeignKeyConstraint(['UserId'], ['User.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('NetWorthBusinessIncomeData',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('UserId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CategoryId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('BucketId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('yearlyAmount', sa.Float(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['BucketId'], ['NetWorthBucketData.Id'], ),
    sa.ForeignKeyConstraint(['CategoryId'], ['NetWorthCategoryData.Id'], ),
    sa.ForeignKeyConstraint(['UserId'], ['User.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('NetWorthFixedDepositData',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('UserId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CategoryId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('BucketId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('AccountNumber', sa.String(), nullable=True),
    sa.Column('MaturityDate', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('PrincipalAmount', sa.Float(), nullable=True),
    sa.Column('MaturityAmount', sa.Float(), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['BucketId'], ['NetWorthBucketData.Id'], ),
    sa.ForeignKeyConstraint(['CategoryId'], ['NetWorthCategoryData.Id'], ),
    sa.ForeignKeyConstraint(['UserId'], ['User.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('NetWorthGoldData',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('UserId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CategoryId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('BucketId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('TodaysValue', sa.Float(), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['BucketId'], ['NetWorthBucketData.Id'], ),
    sa.ForeignKeyConstraint(['CategoryId'], ['NetWorthCategoryData.Id'], ),
    sa.ForeignKeyConstraint(['UserId'], ['User.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('NetWorthHouseData',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('UserId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CategoryId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('BucketId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('PropertyLocation', sa.String(), nullable=False),
    sa.Column('SOPLOP', sa.String(), nullable=False),
    sa.Column('RegistrationYear', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('TodaysValue', sa.Float(), nullable=False),
    sa.Column('PlannedForLiquidity', sa.String(), nullable=False),
    sa.Column('TargetLiquidityYear', sa.String(), nullable=False),
    sa.Column('ExpectedPrice', sa.Float(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['BucketId'], ['NetWorthBucketData.Id'], ),
    sa.ForeignKeyConstraint(['CategoryId'], ['NetWorthCategoryData.Id'], ),
    sa.ForeignKeyConstraint(['UserId'], ['User.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('NetWorthInvestmentData',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('UserId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CategoryId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('BucketId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('AccountNumber', sa.String(), nullable=False),
    sa.Column('StartDate', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('MaturityDate', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('PrincipalAmount', sa.Float(), nullable=False),
    sa.Column('MaturityAmount', sa.Float(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['BucketId'], ['NetWorthBucketData.Id'], ),
    sa.ForeignKeyConstraint(['CategoryId'], ['NetWorthCategoryData.Id'], ),
    sa.ForeignKeyConstraint(['UserId'], ['User.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('NetWorthLifeInsuranceData',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('UserId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CategoryId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('BucketId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('PolicyProvider', sa.String(), nullable=False),
    sa.Column('SchemaName', sa.String(), nullable=False),
    sa.Column('PolicyNumber', sa.String(), nullable=False),
    sa.Column('PolicyType', sa.String(), nullable=False),
    sa.Column('StartDate', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('PolicyTerm', sa.String(), nullable=False),
    sa.Column('SumAssured', sa.Float(), nullable=False),
    sa.Column('MaturityValue', sa.Float(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['BucketId'], ['NetWorthBucketData.Id'], ),
    sa.ForeignKeyConstraint(['CategoryId'], ['NetWorthCategoryData.Id'], ),
    sa.ForeignKeyConstraint(['UserId'], ['User.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('NetWorthLoanData',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('UserId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CategoryId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('BucketId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('LoanType', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('LenderName', sa.String(), nullable=False),
    sa.Column('StartYear', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('EndYear', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('OutStandingAmount', sa.Float(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['BucketId'], ['NetWorthBucketData.Id'], ),
    sa.ForeignKeyConstraint(['CategoryId'], ['NetWorthCategoryData.Id'], ),
    sa.ForeignKeyConstraint(['LoanType'], ['NetWorthLoanTypeData.Id'], ),
    sa.ForeignKeyConstraint(['UserId'], ['User.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('NetWorthOtherAssetData',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('UserId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CategoryId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('BucketId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('AssetName', sa.String(), nullable=True),
    sa.Column('TodaysValue', sa.Float(), nullable=True),
    sa.Column('PlannedForLiquidity', sa.String(), nullable=True),
    sa.Column('TargetLiquidityYear', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('ExpectedPrice', sa.String(), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['BucketId'], ['NetWorthBucketData.Id'], ),
    sa.ForeignKeyConstraint(['CategoryId'], ['NetWorthCategoryData.Id'], ),
    sa.ForeignKeyConstraint(['UserId'], ['User.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('NetWorthOtherIncomeData',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('UserId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CategoryId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('BucketId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('Frequency', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('Duration', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('Amount', sa.Float(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['BucketId'], ['NetWorthBucketData.Id'], ),
    sa.ForeignKeyConstraint(['CategoryId'], ['NetWorthCategoryData.Id'], ),
    sa.ForeignKeyConstraint(['Frequency'], ['NetWorthFrequencyTypeData.Id'], ),
    sa.ForeignKeyConstraint(['UserId'], ['User.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('NetWorthOthersData',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('UserId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CategoryId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('BucketId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('AssetName', sa.String(), nullable=False),
    sa.Column('TodaysValue', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('PlannedForLiquidity', sa.String(), nullable=False),
    sa.Column('TargetLiquidityYear', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('ExpectedPrice', sa.String(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['BucketId'], ['NetWorthBucketData.Id'], ),
    sa.ForeignKeyConstraint(['CategoryId'], ['NetWorthCategoryData.Id'], ),
    sa.ForeignKeyConstraint(['UserId'], ['User.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('NetWorthRentalIncomeData',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('UserId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CategoryId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('BucketId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('Property', sa.String(), nullable=False),
    sa.Column('RentalInflation', sa.Float(), nullable=False),
    sa.Column('RentalIncomePerYear', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['BucketId'], ['NetWorthBucketData.Id'], ),
    sa.ForeignKeyConstraint(['CategoryId'], ['NetWorthCategoryData.Id'], ),
    sa.ForeignKeyConstraint(['UserId'], ['User.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('NetWorthStocksData',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('UserId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CategoryId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('BucketId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('AssetName', sa.String(), nullable=False),
    sa.Column('TodaysValue', sa.Float(), nullable=False),
    sa.Column('PlannedForLiquidityFlag', sa.Boolean(), nullable=False),
    sa.Column('TargetLiquidYear', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('ExpectedPrice', sa.Float(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['BucketId'], ['NetWorthBucketData.Id'], ),
    sa.ForeignKeyConstraint(['CategoryId'], ['NetWorthCategoryData.Id'], ),
    sa.ForeignKeyConstraint(['UserId'], ['User.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('NetWorthUserTableData',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('UserId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CategoryId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('InvestmentBucketId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('Description', sa.String(), nullable=True),
    sa.Column('PropertyLocation', sa.String(), nullable=True),
    sa.Column('SopLop', sa.String(), nullable=True),
    sa.Column('RegistrationYear', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('TodaysValue', sa.Float(), nullable=True),
    sa.Column('PlannedForLiquidityFlag', sa.Boolean(), nullable=True),
    sa.Column('TargetLiquidityYear', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('ExpectedPrice', sa.Float(), nullable=True),
    sa.Column('VehicleType', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('EstimatedValue', sa.Float(), nullable=True),
    sa.Column('AssetName', sa.String(), nullable=True),
    sa.Column('AccountNumber', sa.String(), nullable=True),
    sa.Column('CurrentBalance', sa.Float(), nullable=True),
    sa.Column('FdStartDate', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('MaturityDate', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('PrincipalAmount', sa.Float(), nullable=True),
    sa.Column('MaturityAmount', sa.Float(), nullable=True),
    sa.Column('SchemeName', sa.String(), nullable=True),
    sa.Column('PolicyNumber', sa.String(), nullable=True),
    sa.Column('PolicyType', sa.String(), nullable=True),
    sa.Column('PolicyTerm', sa.String(), nullable=True),
    sa.Column('SumAssured', sa.Float(), nullable=True),
    sa.Column('MaturityValue', sa.Float(), nullable=True),
    sa.Column('LoanType', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('Lender', sa.String(), nullable=True),
    sa.Column('OutStandingAmount', sa.Float(), nullable=True),
    sa.Column('SchemeType', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('Corpus', sa.Float(), nullable=True),
    sa.Column('AnnunityIncome', sa.Float(), nullable=True),
    sa.Column('FrequencyId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('GrowthOfPension', sa.Float(), nullable=True),
    sa.Column('AnnunityMaturity', sa.String(), nullable=True),
    sa.Column('PensionAmount', sa.Float(), nullable=True),
    sa.Column('GrowthAmount', sa.Float(), nullable=True),
    sa.Column('Property', sa.String(), nullable=True),
    sa.Column('RentalInformation', sa.String(), nullable=True),
    sa.Column('YearlyAmount', sa.String(), nullable=True),
    sa.Column('Instrument', sa.String(), nullable=True),
    sa.Column('InterestPerYearOrDividend', sa.Float(), nullable=True),
    sa.Column('TargetDate', sa.Float(), nullable=True),
    sa.Column('Amount', sa.Float(), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['CategoryId'], ['NetWorthCategoryData.Id'], ),
    sa.ForeignKeyConstraint(['FrequencyId'], ['NetWorthFrequencyTypeData.Id'], ),
    sa.ForeignKeyConstraint(['InvestmentBucketId'], ['NetWorthBucketData.Id'], ),
    sa.ForeignKeyConstraint(['LoanType'], ['NetWorthLoanTypeData.Id'], ),
    sa.ForeignKeyConstraint(['SchemeType'], ['NetWorthSchemeTypeData.Id'], ),
    sa.ForeignKeyConstraint(['UserId'], ['User.Id'], ),
    sa.ForeignKeyConstraint(['VehicleType'], ['NetWorthBucketData.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('NetWorthVehicleData',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('UserId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('CategoryId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('BucketId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('Description', sa.String(), nullable=False),
    sa.Column('VehicleType', sa.String(), nullable=False),
    sa.Column('EstimatedValue', sa.Float(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['BucketId'], ['NetWorthBucketData.Id'], ),
    sa.ForeignKeyConstraint(['CategoryId'], ['NetWorthCategoryData.Id'], ),
    sa.ForeignKeyConstraint(['UserId'], ['User.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('Order',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('UserId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('OrderId', sa.String(), nullable=False),
    sa.Column('CFOrderId', sa.Integer(), nullable=False),
    sa.Column('Entity', sa.String(), nullable=False),
    sa.Column('CFPaymentId', sa.Integer(), nullable=True),
    sa.Column('PaymentMethod', sa.String(), nullable=True),
    sa.Column('OrderAmount', sa.Float(), nullable=True),
    sa.Column('OrderStatus', sa.String(), nullable=True),
    sa.Column('OrderToken', sa.String(), nullable=False),
    sa.Column('OrderNote', sa.String(), nullable=True),
    sa.Column('CustomerName', sa.String(), nullable=True),
    sa.Column('CustomerEmail', sa.String(), nullable=True),
    sa.Column('CustomerId', sa.String(), nullable=True),
    sa.Column('CustomerPhone', sa.String(), nullable=True),
    sa.Column('SettlementsUrl', sa.String(), nullable=True),
    sa.Column('PaymentsUrl', sa.String(), nullable=True),
    sa.Column('RefundsUrl', sa.String(), nullable=True),
    sa.Column('PaymentLink', sa.String(), nullable=True),
    sa.Column('OrderTags', sa.String(), nullable=True),
    sa.Column('OrderExpiryTime', sa.String(), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['UserId'], ['User.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('Payment',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('UserId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('cf_payment_id', sa.Integer(), nullable=False),
    sa.Column('order_id', sa.String(), nullable=False),
    sa.Column('entity', sa.String(), nullable=False),
    sa.Column('payment_currency', sa.String(), nullable=False),
    sa.Column('payment_amount', sa.Float(), nullable=False),
    sa.Column('payment_time', sa.String(), nullable=False),
    sa.Column('payment_status', sa.String(), nullable=False),
    sa.Column('payment_message', sa.String(), nullable=False),
    sa.Column('bank_reference', sa.String(), nullable=False),
    sa.Column('auth_id', sa.String(), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['UserId'], ['User.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('PostRetirementConfiguration',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('UserId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('RetirementAge', sa.Integer(), nullable=False),
    sa.Column('LifeExpectancy', sa.Integer(), nullable=False),
    sa.Column('CorpusAmount', sa.Float(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['UserId'], ['User.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('PreRetirementConfiguration',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('UserId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('RetirementAge', sa.Integer(), nullable=False),
    sa.Column('Inflation', sa.Integer(), nullable=False),
    sa.Column('LifeExp', sa.Integer(), nullable=False),
    sa.Column('CalculationLimit', sa.Integer(), nullable=False),
    sa.Column('HealthCareInflation', sa.Integer(), nullable=False),
    sa.Column('GrowthFfIncomeRate', sa.Integer(), nullable=False),
    sa.Column('VacationInflation', sa.Integer(), nullable=False),
    sa.Column('DiscountingRate', sa.Integer(), nullable=False),
    sa.Column('AsIs', sa.Integer(), nullable=False),
    sa.Column('Luxury', sa.Integer(), nullable=False),
    sa.Column('Modest', sa.Integer(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['UserId'], ['User.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('Refund',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('UserId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('order_id', sa.String(), nullable=False),
    sa.Column('cf_refund_id', sa.String(), nullable=False),
    sa.Column('refund_id', sa.String(), nullable=False),
    sa.Column('cf_payment_id', sa.Integer(), nullable=False),
    sa.Column('entity', sa.String(), nullable=False),
    sa.Column('refund_amount', sa.Float(), nullable=False),
    sa.Column('refund_currency', sa.String(), nullable=False),
    sa.Column('refund_note', sa.String(), nullable=False),
    sa.Column('refund_status', sa.String(), nullable=False),
    sa.Column('refund_type', sa.String(), nullable=False),
    sa.Column('failure_reason', sa.String(), nullable=False),
    sa.Column('created_at', sa.String(), nullable=False),
    sa.Column('processed_on', sa.String(), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['UserId'], ['User.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('RrScoreResult',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('UserId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('RRScoreResult', sa.String(), nullable=False),
    sa.Column('CorpusRequired', sa.Float(), nullable=False),
    sa.Column('ExpectedValueOfExistingInvestments', sa.Float(), nullable=False),
    sa.Column('UserAge', sa.Integer(), nullable=False),
    sa.Column('AmountRequired', sa.Float(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['UserId'], ['User.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('Settlement',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('cf_payment_id', sa.Integer(), nullable=False),
    sa.Column('order_id', sa.String(), nullable=False),
    sa.Column('entity', sa.String(), nullable=False),
    sa.Column('order_amount', sa.Integer(), nullable=False),
    sa.Column('payment_time', sa.DateTime(), nullable=False),
    sa.Column('service_charge', sa.Integer(), nullable=False),
    sa.Column('service_tax', sa.Float(), nullable=False),
    sa.Column('settlement_amount', sa.Float(), nullable=False),
    sa.Column('cf_settlement_id', sa.Integer(), nullable=False),
    sa.Column('transfer_id', sa.Integer(), nullable=False),
    sa.Column('transfer_time', sa.DateTime(), nullable=False),
    sa.Column('transfer_utr', sa.String(), nullable=False),
    sa.Column('order_currency', sa.String(), nullable=False),
    sa.Column('settlement_currency', sa.String(), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['User.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('SignZy',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('UserId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('SignZyId', sa.String(), nullable=False),
    sa.Column('Token', sa.String(), nullable=False),
    sa.Column('TTL', sa.Integer(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['UserId'], ['User.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('SignzyUsers',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('UserId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('Email', sa.String(), nullable=False),
    sa.Column('Phone', sa.String(), nullable=False),
    sa.Column('Name', sa.String(), nullable=False),
    sa.Column('UserName', sa.String(), nullable=False),
    sa.Column('ResponseId', sa.String(), nullable=False),
    sa.Column('ChannelId', sa.String(), nullable=False),
    sa.Column('ChannelUserName', sa.String(), nullable=False),
    sa.Column('ChannelName', sa.String(), nullable=False),
    sa.Column('ApplicationUrl', sa.String(), nullable=False),
    sa.Column('MobileLoginUrl', sa.String(), nullable=False),
    sa.Column('AutoLoginUrl', sa.String(), nullable=False),
    sa.Column('MobileAutoLoginUrl', sa.String(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['UserId'], ['User.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('SubmitQuestion',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('QuestionId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('UserId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('ChoiceId', sa.String(), nullable=True),
    sa.Column('UserText', sa.String(), nullable=True),
    sa.Column('SelectedValue', sa.Integer(), nullable=False),
    sa.Column('ModuleType', sa.Integer(), nullable=False),
    sa.Column('ChoiceSequence', sa.Integer(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['QuestionId'], ['Question.Id'], ),
    sa.ForeignKeyConstraint(['UserId'], ['User.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('UserAssets',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('UserId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('AssetTypeId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('FundName', sa.String(), nullable=False),
    sa.Column('NoOfUnits', sa.Integer(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['AssetTypeId'], ['AssetType.Id'], ),
    sa.ForeignKeyConstraint(['UserId'], ['User.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('UserGoals',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('UserId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('GoalBucketId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('GoalCategoryId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('GoalName', sa.String(), nullable=True),
    sa.Column('GoalFrequencyId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('GoalInflationRate', sa.Float(), nullable=True),
    sa.Column('GoalAmount', sa.Float(), nullable=True),
    sa.Column('GoalAmountType', sa.Boolean(), nullable=True),
    sa.Column('EndOfLife', sa.Boolean(), nullable=True),
    sa.Column('GoalTypeId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('GoalPriority', sa.Integer(), nullable=True),
    sa.Column('GoalStartAge', sa.Integer(), nullable=True),
    sa.Column('GoalEndAge', sa.Integer(), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['GoalBucketId'], ['GoalBucket.Id'], ),
    sa.ForeignKeyConstraint(['GoalCategoryId'], ['GoalCategory.Id'], ),
    sa.ForeignKeyConstraint(['GoalFrequencyId'], ['Frequency.Id'], ),
    sa.ForeignKeyConstraint(['GoalTypeId'], ['GoalType.Id'], ),
    sa.ForeignKeyConstraint(['UserId'], ['User.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('UserIncomes',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('UserId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('IncomeCategoryId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('IncomeTypeId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('IncomeFrequencyId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('IncomeInflationRate', sa.Float(), nullable=True),
    sa.Column('IncomeStartAge', sa.Integer(), nullable=True),
    sa.Column('IncomeEndAge', sa.Integer(), nullable=True),
    sa.Column('IncomeAmount', sa.Float(), nullable=True),
    sa.Column('IncomeAmountType', sa.Boolean(), nullable=True),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['IncomeCategoryId'], ['IncomeCategory.Id'], ),
    sa.ForeignKeyConstraint(['IncomeFrequencyId'], ['Frequency.Id'], ),
    sa.ForeignKeyConstraint(['IncomeTypeId'], ['IncomeType.Id'], ),
    sa.ForeignKeyConstraint(['UserId'], ['User.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('UserInfo',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('UserId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('Text', sa.String(), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['UserId'], ['User.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    op.create_table('UsersReBalanceSheet',
    sa.Column('Id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('UserId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('TargetAssetsId', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('Amount', sa.Integer(), nullable=False),
    sa.Column('SIPAccount', sa.Boolean(), nullable=True),
    sa.Column('SIPAmount', sa.Integer(), nullable=False),
    sa.Column('TransactionStatus', sa.String(), nullable=False),
    sa.Column('ReBalanceStatus', sa.String(), nullable=False),
    sa.Column('WatchDays', sa.Integer(), nullable=False),
    sa.Column('CreatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('UpdatedOn', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('IsDeleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['TargetAssetsId'], ['TargetAssets.Id'], ),
    sa.ForeignKeyConstraint(['UserId'], ['User.Id'], ),
    sa.PrimaryKeyConstraint('Id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('UsersReBalanceSheet')
    op.drop_table('UserInfo')
    op.drop_table('UserIncomes')
    op.drop_table('UserGoals')
    op.drop_table('UserAssets')
    op.drop_table('SubmitQuestion')
    op.drop_table('SignzyUsers')
    op.drop_table('SignZy')
    op.drop_table('Settlement')
    op.drop_table('RrScoreResult')
    op.drop_table('Refund')
    op.drop_table('PreRetirementConfiguration')
    op.drop_table('PostRetirementConfiguration')
    op.drop_table('Payment')
    op.drop_table('Order')
    op.drop_table('NetWorthVehicleData')
    op.drop_table('NetWorthUserTableData')
    op.drop_table('NetWorthStocksData')
    op.drop_table('NetWorthRentalIncomeData')
    op.drop_table('NetWorthOthersData')
    op.drop_table('NetWorthOtherIncomeData')
    op.drop_table('NetWorthOtherAssetData')
    op.drop_table('NetWorthLoanData')
    op.drop_table('NetWorthLifeInsuranceData')
    op.drop_table('NetWorthInvestmentData')
    op.drop_table('NetWorthHouseData')
    op.drop_table('NetWorthGoldData')
    op.drop_table('NetWorthFixedDepositData')
    op.drop_table('NetWorthBusinessIncomeData')
    op.drop_table('NetWorthBankDepositData')
    op.drop_table('NetWorthAnnuityData')
    op.drop_table('GeneratedIncomes')
    op.drop_table('GeneratedGoals')
    op.drop_table('GeneratedCashLadderPre')
    op.drop_table('GeneratedCashLadder')
    op.drop_table('GeneratedBuckets')
    op.drop_table('DailyAssetData')
    op.drop_table('Choice')
    op.drop_table('BseClientNominee')
    op.drop_table('BseClientCode')
    op.drop_table('BseClientAccount')
    op.drop_table('User')
    op.drop_table('Question')
    op.drop_table('MorningStarNavs')
    op.drop_table('InvestmentVehicle')
    op.drop_table('IncomeCategory')
    op.drop_table('GoalCategory')
    op.drop_table('FundsCategory')
    op.drop_table('FundLevelAssetPercent')
    op.drop_table('ExpenseCategory')
    op.drop_table('AssetsLimit')
    op.drop_table('RuleAssetAllocation')
    op.drop_table('Role')
    op.drop_table('RetirementStatus')
    op.drop_table('RelationType')
    op.drop_table('Rate')
    op.drop_table('QuestionType')
    op.drop_table('PortfolioMorningStar')
    op.drop_table('PolicyWeightage')
    op.drop_table('PaymentType')
    op.drop_table('OtherGoalType')
    op.drop_table('NetWorthCategoryData')
    op.drop_table('MaritalStatus')
    op.drop_table('LoanType')
    op.drop_table('InvestmentType')
    op.drop_table('InvestmentProfile')
    op.drop_table('InvestmentBucket')
    op.drop_table('InstrumentType')
    op.drop_table('IncomeType')
    op.drop_table('GoalType')
    op.drop_table('GoalBucket')
    op.drop_table('Gender')
    op.drop_table('FundsType')
    op.drop_table('Frequency')
    op.drop_table('ExpenseType')
    op.drop_table('EventType')
    op.drop_table('CorpusStatus')
    op.drop_table('BankAccountType')
    op.drop_table('AssetType')
    op.drop_table('AssetLiabilityCategory')
    op.drop_table('AssetAllocationAttributes')
    op.drop_table('AreasOfConcerns')
    op.drop_table('WillingnessConfiguration')
    op.drop_table('UserResult')
    op.drop_table('UserAnswers')
    op.drop_table('TargetAssets')
    op.drop_table('SustainabilityScoreConfiguration')
    op.drop_table('SourceOfWealth')
    op.drop_table('SignzyAccount')
    op.drop_table('RuleCondition')
    op.drop_table('RrScoreConfiguration')
    op.drop_table('RiskProfileConfiguration')
    op.drop_table('PreRetirementCorpusCalculation')
    op.drop_table('PostGoal')
    op.drop_table('PhoneApi')
    op.drop_table('OccupationTypes')
    op.drop_table('NomineeRelation')
    op.drop_table('NetWorthVehicleTypeData')
    op.drop_table('NetWorthSchemeTypeData')
    op.drop_table('NetWorthLoanTypeData')
    op.drop_table('NetWorthFrequencyTypeData')
    op.drop_table('NetWorthBucketData')
    op.drop_table('Kyc')
    op.drop_table('Income')
    op.drop_table('DailyNavData')
    op.drop_table('CashFreeConfiguration')
    op.drop_table('Bucket')
    op.drop_table('BseStateCode')
    op.drop_table('BsePanExemptCategory')
    op.drop_table('BseCountryCode')
    op.drop_table('BseCommunicationMode')
    op.drop_table('BseClientTaxStatus')
    op.drop_table('BseClientOccupationCode')
    op.drop_table('BseClientHolding')
    op.drop_table('BseAccountType')
    op.drop_table('Banks')
    op.drop_table('BankBranches')
    op.drop_table('BSEIncomeSlab')
    op.drop_table('Advisor')
    op.drop_table('AbilityConfiguration')
    # ### end Alembic commands ###
